version: '3.4'

services:
  apache:
    build: ./apache
    container_name: apache
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # - "./apache/test_certs/local.ncsu.edu-selfsigned.crt:/etc/ssl/certs/sdc.csc.ncsu.edu.crt"
      # - "./apache/test_certs/local.ncsu.edu-selfsigned.key:/etc/ssl/private/sdc.csc.ncsu.edu.key"
      - "./apache/test_certs/local.ncsu.edu-selfsigned.crt:/etc/ssl/certs/sdc.csc.ncsu.edu.crt"
      - "./apache/test_certs/local.ncsu.edu-selfsigned.key:/etc/ssl/private/sdc.csc.ncsu.edu.key"
      - "./apache/conf/default.conf:/etc/apache2/sites-enabled/000-default.conf"
      - "./apache/conf/ssl.conf:/etc/apache2/sites-enabled/ssl.conf"

  database:
    container_name: database
    image: mysql
    env_file:
      - .env
    ports:
      - "3306:3306"

    #This specifies that the container should use a persistent volume at /mysql-data
    #Otherwise, the container will create a new volume on each run and lose data
    volumes:
      - ./mysql-data:/var/lib/mysql
  scraperapi:
    container_name: scraperapi

    env_file:
      - .env

    #Builds the image from the Dockerfile in the current directory
    build: ./scraperapi

    volumes:
      - './scraperapi:/app'
  backend:
    container_name: backend
    depends_on:
      - database
      - scraperapi

    env_file:
      - .env

    #Builds the image from the Dockerfile in the current directory
    build: ./backend

    #Shares the container volume with the host so code changes are immediately available
    volumes:
      - './backend:/app'
  frontend:
    container_name: frontend

    #Builds the image from the Dockerfile in the current directory
    build: ./frontend

    environment:
      - "FAST_REFRESH=false"
      - "CHOKIDAR_USEPOLLING=true"
      - "WDS_SOCKET_PORT=80"

    #Shares the container volume with the host so code changes are immediately available
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public